#!/usr/bin/env python
import os
import sys
import cPickle as cpkl
import glob 
import numpy as np
import AnisotropySearch as AS
import optparse 


usage = """
$prog PSDPATH\n
PSDPATH --- path to file in which to save the merged PSD
"""
parser = optparse.OptionParser( usage = usage )

parser.add_option( '-m' , action='append' , dest='mergs' , nargs=2 , type = 'string' ,
                   help='two arguments: scale factor by which the psd is multiplied and the path to this psd' )

( options , args ) = parser.parse_args()

if len( args ) < 1 :
    parser.error( 'You must specify PSDPATH! (generated by script_setup_merge_psds.py)' )
else :
    psdpath = args[0]

Nmerg = len( options.mergs )

mergpaths = [ merg[1] for merg in options.mergs ]
files = [ open( mergpath , 'rb' ) for mergpath in mergpaths ]
psddicts = [ cpkl.load( file ) for file in files ] ; [ file.close() for file in files ]

PAAdatas = [ float( options.mergs[k][0] ) * psddicts[k]['AA'].data for k in range( Nmerg ) ]
PEEdatas = [ float( options.mergs[k][0] ) * psddicts[k]['EE'].data for k in range( Nmerg ) ]
PTTdatas = [ float( options.mergs[k][0] ) * psddicts[k]['TT'].data for k in range( Nmerg ) ]

PAAdata = np.sum( np.array( PAAdatas ) , 0 )
PEEdata = np.sum( np.array( PEEdatas ) , 0 )
PTTdata = np.sum( np.array( PTTdatas ) , 0 )

f = psddicts[0]['f']
fscale = { 'Offset1':f.Offset1 , 'Cadence1':f.Cadence1 }
PAA = AS.Coarsable( PAAdata , **fscale )
PEE = AS.Coarsable( PEEdata , **fscale )
PTT = AS.Coarsable( PTTdata , **fscale )

psddict = { 'f':f , 'AA':PAA , 'EE':PEE , 'TT':PTT }
psddict['f'] , psddict['AA'] , psddict['EE'] , psddict['TT'] = f , PAA , PEE , PTT

psddir = os.path.dirname( psdpath )
if psddir not in glob.glob( psddir ) :
    os.system( 'mkdir -p %s' % psddir )
file = open( psdpath , 'wb' ) ; cpkl.dump( psddict , file , -1 ) ; file.close()

    
    

    
