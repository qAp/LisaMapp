#!/usr/bin/env python
import os
import sys
import cPickle as cpkl
import glob 
import numpy as np
import AnisotropySearch as AS
import optparse 


usage = """
$prog CSDPATH\n
CSDPATH --- path to file in which to save the merged CSD
"""
parser = optparse.OptionParser( usage = usage )

parser.add_option( '-m' , action='append' , dest='mergs' , nargs=2 , type = 'string' ,
                   help='two arguments: scale factor by which the csd is multiplied and the path to this csd' )

( options , args ) = parser.parse_args()

if len( args ) < 1 :
    parser.error( 'You must specify CSDPATH! (generated by script_setup_merge_psds_csds.py)' )
else :
    csdpath = args[0]

Nmerg = len( options.mergs )

mergpaths = [ merg[1] for merg in options.mergs ]
files = [ open( mergpath , 'rb' ) for mergpath in mergpaths ]
csddicts = [ cpkl.load( file ) for file in files ] ; [ file.close() for file in files ]

PAEdatas = [ float( options.mergs[k][0] ) * csddicts[k]['AE'].data for k in range( Nmerg ) ]
PATdatas = [ float( options.mergs[k][0] ) * csddicts[k]['AT'].data for k in range( Nmerg ) ]
PETdatas = [ float( options.mergs[k][0] ) * csddicts[k]['ET'].data for k in range( Nmerg ) ]

PAEdata = np.sum( np.array( PAEdatas ) , 0 )
PATdata = np.sum( np.array( PATdatas ) , 0 )
PETdata = np.sum( np.array( PETdatas ) , 0 )

f = csddicts[0]['f']
fscale = { 'Offset1':f.Offset1 , 'Cadence1':f.Cadence1 }
PAE = AS.Coarsable( PAEdata , **fscale )
PAT = AS.Coarsable( PATdata , **fscale )
PET = AS.Coarsable( PETdata , **fscale )

csddict = { 'f':f , 'AE':PAE , 'AT':PAT , 'ET':PET }
csddict['f'] , csddict['AE'] , csddict['AT'] , csddict['ET'] = f , PAE , PAT , PET

csddir = os.path.dirname( csdpath )
if csddir not in glob.glob( csddir ) :
    os.system( 'mkdir -p %s' % csddir )
file = open( csdpath , 'wb' ) ; cpkl.dump( csddict , file , -1 ) ; file.close()

    
    

    
